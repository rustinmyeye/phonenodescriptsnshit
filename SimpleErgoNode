#!/bin/bash

echo "- Retrieving latest node release."
            LATEST_ERGO_RELEASE=$(curl -s "https://api.github.com/repos/ergoplatform/ergo/releases/latest" | awk -F '"' '/tag_name/{print $4}')
            LATEST_ERGO_RELEASE_NUMBERS=$(echo ${LATEST_ERGO_RELEASE} | cut -c 2-)
            ERGO_DOWNLOAD_URL=https://github.com/ergoplatform/ergo/releases/download/${LATEST_ERGO_RELEASE}/ergo-${LATEST_ERGO_RELEASE_NUMBERS}.jar
            echo "- Downloading Latest known Ergo release: ${LATEST_ERGO_RELEASE}."
            curl --silent -L ${ERGO_DOWNLOAD_URL} --output ergo.jar

sleep 2

clear

export BLAKE_HASH="d3bce9a53e3fbaba4a0cb92f9e419bb47123c07ab31f626362e2658e7dcfc7c2"
       
# Set some environment variables
set_environment(){
    export KEY=ee7OHzUHWFBB8eeBf9PD9BQk2
   }

set_configuration(){
        echo "ergo {
  networkType = "mainnet"
  chain {
    # Blockchain protocol version supported by the client.
    # Version 1 is mainnet launch version
    # Version 2 is about the hardening fork, Autolykos 2 PoW with no non-outsourceability, tx witnesses commitments
    # Version 3 is about 5.0 contracts interpreter with JIT costing, monotonic creation height rule
    protocolVersion = 3

    # Network address prefix, currently reserved values are 0 (money chain mainnet) and 16 (money chain testnet)
    addressPrefix = 0
    # A difficulty the network starts with
    initialDifficultyHex = "011765000000"
    # Defines an id of the genesis block. Other genesis blocks will be considered invalid.
    genesisId = "b0244dfc267baca974a4caee06120321562784303a8a688976ae56170e4d175b"
    # Base16 representation of genesis state roothash
    genesisStateDigestHex = "a5df145d41ab15a01e0cd3ffbab046f0d029e5412293072ad0f5827428589b9302"

    voting {
      # Activation height for mainnet protocol version 2 (client version 4.0.0 hard-fork)
      version2ActivationHeight = 417792 // around Feb, 1st, 2021

      # Difficulty for Autolykos version 2 activation (corresponding to ~ 1 TH/s hashrate)
      version2ActivationDifficultyHex = "6f98d5000000"
    }

    reemission {
      checkReemissionRules = false

      emissionNftId = "20fa2bf23962cdf51b07722d6237c0c7b8a44f78856c0f7ec308dc1ef1a92a51"

      reemissionTokenId = "d9a2cc8a09abfaed87afacfbb7daee79a6b26f10c6613fc13d3f3953e5521d1a"

      reemissionNftId = "d3feeffa87f2df63a7a15b4905e618ae3ce4c69a7975f171bd314d0b877927b8"

      activationHeight = 777217

      reemissionStartHeight = 2080800

      injectionBoxBytesEncoded = "80a8d6b9071003040005808098f4e9b5ca6a0402d1ed91c1b2a4730000730193c5a7c5b2a47302008f9e2d0220fa2bf23962cdf51b07722d6237c0c7b8a44f78856c0f7ec308dc1ef1a92a5101d9a2cc8a09abfaed87afacfbb7daee79a6b26f10c6613fc13d3f3953e5521d1a808088fccdbcc32300fca71b8b95f6ad14ce600a126c8842334d40d35f8754176c4cda2c95219f19f700"
    }
  }

  node {
    mining = false
    # start mining without waiting for a new block. helps in avoiding waiting period after node restart
    offlineGeneration = true

    # Optional and individual checkpoint.
    # Till the height given (inclusive) validation of transaction scripts skipped.
    # This helps in improving performance and memory usage during initial bootstrapping.
    # The node still applying transactions to UTXO set and so checks UTXO set digests for each block.
    # And so the block at checkpoint height is to be checked also against expected UTXO set digest.
    #
    # To validate all the scripts for all the blocks, set checkpoint = null.
    checkpoint = {
      height = 1050000
      blockId = "7829c6513c5b319b86e87253ed29d51fed61597c65e32f5197434461ccc4c905"
    }

    # List with hex-encoded identifiers of transactions banned from getting into memory pool
    blacklistedTransactions = []

    # maximum cost of transaction for it to be propagated
    maxTransactionCost = 4900000

    utxo {
        # Download and apply UTXO set snapshot and full-blocks after that
        utxoBootstrap = true

        # how many utxo set snapshots to store, 0 means that they are not stored at all
        storingUtxoSnapshots = 2

        # how many utxo set snapshots for a height with same id we need to find in p2p network
        # in order to start downloading it
        p2pUtxoSnapshots = 2
    }
  }

}

scorex {
    restApi {
        apiKeyHash = "$BLAKE_HASH"
    }
}" > ergo.conf

}


main_thing(){
    set_environment
    # Check for the prescence of log files
    count=`ls -1 blake.conf 2>/dev/null | wc -l`
    if [ $count != 0 ]; then   
    API_KEY=$(cat "api.conf")
    echo "
  Configuration is ok. Starting up..."
    BLAKE_HASH=$(cat "blake.conf")
    echo "
"
    set_configuration
    start_node
print_console
else 
    # If no .log file - we assume first run
    first_run 
fi
}

print_console() {
    
        printf "%s    \n\n" \
            "View the Ergo node panel at 127.0.0.1:9053/panel" \
            "Your unique API key is: $API_KEY" \
            "To start the node in the future, use ./ergo"
            
            sleep 300
   exit
}

start_node(){
    tmux new-session -d -s node_session './start'
}

first_run() {
echo "#!/bin/sh  
while true  
do
          java -jar -Xmx2G ergo.jar --mainnet -c ergo.conf
            sleep 100
    done" > start
    
chmod +x start

KEY=ee7OHzUHWFBB8eeBf9PD9BQk2

BLAKE_HASH="d3bce9a53e3fbaba4a0cb92f9e419bb47123c07ab31f626362e2658e7dcfc7c2"

set_configuration

### Download the latest .jar file                                                                    
        if [ ! -e *.jar ]; then 
            echo "- Retrieving latest node release."
            LATEST_ERGO_RELEASE=$(curl -s "https://api.github.com/repos/ergoplatform/ergo/releases/latest" | awk -F '"' '/tag_name/{print $4}')
            LATEST_ERGO_RELEASE_NUMBERS=$(echo ${LATEST_ERGO_RELEASE} | cut -c 2-)
            ERGO_DOWNLOAD_URL=https://github.com/ergoplatform/ergo/releases/download/${LATEST_ERGO_RELEASE}/ergo-${LATEST_ERGO_RELEASE_NUMBERS}.jar
            echo "- Downloading Latest known Ergo release: ${LATEST_ERGO_RELEASE}."
            curl --silent -L ${ERGO_DOWNLOAD_URL} --output ergo.jar
        fi 
        
        echo "
Generating unique API key..."
        sleep 2
        
       length=25
        export API_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $length | head -n 1)
        echo "$API_KEY" > api.conf
        
        #export key=$(cat api.conf)
        
        tmux new-session -d -s node 'java -jar ergo.jar --mainnet -c ergo.conf'
        echo "- Node has started... Setting blake hash"
        sleep 10

        export BLAKE_HASH=$(curl --silent -X POST "http://localhost:9053/utils/hash/blake2b" -H "accept: application/json" -H "Content-Type: application/json" -d "\"$API_KEY\"")
        echo "$BLAKE_HASH" > blake.conf
        echo "BLAKE_HASH:$BLAKE_HASH"
        
        curl -X POST --max-time 10 "http://127.0.0.1:9053/node/shutdown" -H "api_key: $KEY"
        sleep 10
        tmux kill-session -t node_session
      
        set_configuration
      
        main_thing
        
}

main_thing
