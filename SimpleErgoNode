#!/bin/bash

echo "- Retrieving latest node release."
            LATEST_ERGO_RELEASE=$(curl -s "https://api.github.com/repos/ergoplatform/ergo/releases/latest" | awk -F '"' '/tag_name/{print $4}')
            LATEST_ERGO_RELEASE_NUMBERS=$(echo ${LATEST_ERGO_RELEASE} | cut -c 2-)
            ERGO_DOWNLOAD_URL=https://github.com/ergoplatform/ergo/releases/download/${LATEST_ERGO_RELEASE}/ergo-${LATEST_ERGO_RELEASE_NUMBERS}.jar
            echo "- Downloading Latest known Ergo release: ${LATEST_ERGO_RELEASE}."
            curl --silent -L ${ERGO_DOWNLOAD_URL} --output ergo.jar

sleep 2

clear

export BLAKE_HASH="d3bce9a53e3fbaba4a0cb92f9e419bb47123c07ab31f626362e2658e7dcfc7c2"
       
# Set some environment variables
set_environment(){
    export KEY=ee7OHzUHWFBB8eeBf9PD9BQk2
   }

set_configuration(){
        echo "ergo {
  node {
    mining = false
    # Optional and individual checkpoint.
    # Till the height given (inclusive) validation of transaction scripts skipped.
    # This helps in improving performance and memory usage during initial bootstrapping.
    # The node still applying transactions to UTXO set and so checks UTXO set digests for each block.
    # And so the block at checkpoint height is to be checked also against expected UTXO set digest.
    #
    # To validate all the scripts for all the blocks, set checkpoint = null.
    checkpoint = {
      height = 1050000
      blockId = "7829c6513c5b319b86e87253ed29d51fed61597c65e32f5197434461ccc4c905"
    }

    utxo {
        # Download and apply UTXO set snapshot and full-blocks after that
        utxoBootstrap = true

        # how many utxo set snapshots to store, 0 means that they are not stored at all
        storingUtxoSnapshots = 2

        # how many utxo set snapshots for a height with same id we need to find in p2p network
        # in order to start downloading it
        p2pUtxoSnapshots = 2
    }
  }

}

scorex {
    network {
    magicBytes = [1, 0, 2, 4]
    bindAddress = "0.0.0.0:9030"
    nodeName = "AndroidNode"${scorex.network.appVersion}
    nodeName = ${?NODENAME}
    knownPeers = [
      "213.239.193.208:9030",
      "159.65.11.55:9030",
      "165.227.26.175:9030",
      "159.89.116.15:9030",
      "136.244.110.145:9030",
      "94.130.108.35:9030",
      "51.75.147.1:9020",
      "221.165.214.185:9030",
      "217.182.197.196:9030",
      "173.212.220.9:9030",
      "176.9.65.58:9130",
      "213.152.106.56:9030"
    ]
  }
restApi {
        apiKeyHash = "$BLAKE_HASH" 
    }
}" > ergo.conf

}


main_thing(){
    set_environment
    # Check for the prescence of log files
    count=`ls -1 blake.conf 2>/dev/null | wc -l`
    if [ $count != 0 ]; then   
    API_KEY=$(cat "api.conf")
    echo "
  Configuration is ok. Starting up..."
    BLAKE_HASH=$(cat "blake.conf")
    echo "
"
    set_configuration
    start_node
print_console
else 
    # If no .log file - we assume first run
    first_run 
fi
}

print_console() {
    
        printf "%s    \n\n" \
            "View the Ergo node panel at 127.0.0.1:9053/panel" \
            "Your unique API key is: $API_KEY" \
            "To start the node in the future, use ./ergo"
            
            sleep 300
   exit
}

start_node(){
    tmux new-session -d -s node_session './start'
}

first_run() {
echo "#!/bin/sh  
while true  
do
          java -jar ergo.jar --mainnet -c ergo.conf
            sleep 100
    done" > start
    
chmod +x start

KEY=ee7OHzUHWFBB8eeBf9PD9BQk2

BLAKE_HASH="d3bce9a53e3fbaba4a0cb92f9e419bb47123c07ab31f626362e2658e7dcfc7c2"

set_configuration

### Download the latest .jar file                                                                    
        if [ ! -e *.jar ]; then 
            echo "- Retrieving latest node release."
            LATEST_ERGO_RELEASE=$(curl -s "https://api.github.com/repos/ergoplatform/ergo/releases/latest" | awk -F '"' '/tag_name/{print $4}')
            LATEST_ERGO_RELEASE_NUMBERS=$(echo ${LATEST_ERGO_RELEASE} | cut -c 2-)
            ERGO_DOWNLOAD_URL=https://github.com/ergoplatform/ergo/releases/download/${LATEST_ERGO_RELEASE}/ergo-${LATEST_ERGO_RELEASE_NUMBERS}.jar
            echo "- Downloading Latest known Ergo release: ${LATEST_ERGO_RELEASE}."
            curl --silent -L ${ERGO_DOWNLOAD_URL} --output ergo.jar
        fi 
        
        echo "
Generating unique API key..."
        sleep 2
        
       length=25
        export API_KEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w $length | head -n 1)
        echo "$API_KEY" > api.conf
        
        #export key=$(cat api.conf)
        
        tmux new-session -d -s node 'java -jar ergo.jar --mainnet -c ergo.conf'
        echo "- Node has started... Setting blake hash"
        sleep 10

        export BLAKE_HASH=$(curl --silent -X POST "http://localhost:9053/utils/hash/blake2b" -H "accept: application/json" -H "Content-Type: application/json" -d "\"$API_KEY\"")
        echo "$BLAKE_HASH" > blake.conf
        echo "BLAKE_HASH:$BLAKE_HASH"
        
        curl -X POST --max-time 10 "http://127.0.0.1:9053/node/shutdown" -H "api_key: $KEY"
        sleep 10
        tmux kill-session -t node_session
      
        set_configuration
      
        main_thing
        
}

main_thing
